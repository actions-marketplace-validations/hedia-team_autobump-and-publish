name: "Autobump version and publish"
description: "Hedia's npm packages autobumper & publisher"

inputs:
  github-token:
    description: "GitHub token required by izhangzhihao/delete-comment to remove comment from PR"
    required: true

  npm-token:
    description: "NPM token required to publish package to npm"
    required: true

  issue-number:
    description: "Issue number required by peter-evans/create-or-update-comment & izhangzhihao/delete-comment in order to write/remove comments on the current PR"
    required: true

  label:
    description: "Type of version bump [major, minor, patch]"

  is-post-merge: # [true, false]
    description: "Boolean used to publish package as release on NPM if action is being triggered by post-merging the PR"
    required: false
    default: false

  run-ci: # [true, false]
    description: "Value used to determine if npm run ci shall run"
    required: false
    default: false

  run-lint: # [true, false]
    description: "Value used to determine if npm run lint shall run"
    required: false
    default: false

  run-lint-pkg: # [true, false]
    description: "Value used to determine if npm run lint-pkg shall run"
    required: false
    default: false

  run-prettier: # [true, false]
    description: "Value used to determine if npm run prettier shall run"
    required: false
    default: false

  run-test: # [true, false]
    description: "Value used to determine if npm run test shall run"
    required: false
    default: false

  run-test-coverage: # [true, false]
    description: "Value used to determine if npm run test-coverage shall run"
    required: false
    default: false

  run-tsc: # [true, false]
    description: "Value used to determine if npm run tsc shall run"
    required: false
    default: false

runs:
  using: "composite"

  steps:
    - name: Register NPM access token
      run: |
        echo "Registering NPM access token"
        npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
      env:
        NPM_TOKEN: ${{ inputs.npm-token }}
      shell: bash

    - name: Fetch latest version from NPM
      id: bump-package-version
      run: |
        if [[ "${{inputs.is-post-merge}}" == 'false' ]]; then
          echo "Fetching latest package version"
          chmod +x bump-package-version.sh
          ./bump-package-version.sh "${LABEL}"
        else
          echo "Skipped bumping version"
        fi
        exit 0
      env:
        LABEL: ${{ inputs.label }}
      shell: bash

    - name: Run ci
      id: run-ci
      run: |
        if [[ "${{inputs.run-ci}}" == 'true' ]]; then
          echo "Running ci"
          npm ci --ignore-scripts
        else
          echo "Skipped ci"
        fi
        exit 0
      shell: bash

    - name: Run lint
      id: run-lint
      run: |
        if [[ "${{inputs.run-lint}}" == 'true' ]]; then
          echo "Running lint"
          npm run lint
        else
          echo "Skipped lint"
        fi
        exit 0
      shell: bash

    - name: Run lint-pkg
      id: run-lint-pkg
      run: |
        if [[ "${{inputs.run-lint-pkg}}" == 'true' ]]; then
          echo "Running lint-pkg"
          npm run lint-pkg
        else
          echo "Skipped lint-pkg"
        fi
        exit 0
      shell: bash

    - name: Run prettier
      id: run-prettier
      run: |
        if [[ "${{inputs.run-prettier}}" == 'true' ]]; then
          echo "Running prettier"
          npm run prettier
        else
          echo "Skipped prettier"
        fi
        exit 0
      shell: bash

    - name: Run test-coverage
      id: run-test-coverage
      run: |
        if [[ "${{inputs.run-test-coverage}}" == 'true' ]]; then
          echo "Running test-coverage"
          npm run test-coverage
        else
          echo "Skipped test-coverage"
        fi
        exit 0
      shell: bash

    - name: Run test
      id: run-test
      run: |
        if [[ "${{inputs.run-test}}" == 'true' ]]; then
          echo "Running test"
          npm run test
        else
          echo "Skipped test"
        fi
        exit 0
      shell: bash

    - name: Run tsc
      id: run-tsc
      run: |
        if [[ "${{inputs.run-tsc}}" == 'true' ]]; then
          echo "Running tsc"
          npm run tsc
        else
          echo "Skipped tsc"
        fi
        exit 0
      shell: bash

    - name: Publish package on NPM
      id: publish-package-npm
      run: |
        if [[ "${{inputs.is-post-merge}}" == 'true' ]]; then
          echo "publishing release on npm"
          publish=$(npm publish)
          version=${publish##*+}
        else
          echo "publishing alpha on npm"
          publish=$(npm publish --tag alpha)
          version=${publish##*+}
        fi
        echo ::set-output name=publish-output::"$version"
      shell: bash

    - name: Remove alpha tag
      id: remove-alpha-tag
      run: |
        if [[ "${{inputs.is-post-merge}}" == 'false' ]]; then
          echo "Removing the alpha-tag"
          chmod +x ./remove-alpha-tag.sh && ./remove-alpha-tag.sh
        else
          echo "Skipped remove-alpha-tag"
        fi
        exit 0
      shell: bash

    - name: Remove old comment from PR
      id: delete-comment
      uses: izhangzhihao/delete-comment@master
      with:
        github_token: ${{ inputs.github-token }}
        delete_user_name: github-actions[bot]
        issue_number: ${{ inputs.issue-number }} # remove comments from the current PR

    - name: Write comment on PR
      id: write-comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ðŸŽ‰  Successfully published new version  ðŸŽ‰
          âœ…  ${{ steps.publish-package-npm.outputs.publish-output }}

branding:
  icon: "arrow-up-circle"
  color: "purple"
